Инструкция по использованию
?? Вернуться к основному README

Версия run_app_project - предназначена для использования утилиты прямо в корне папки проекта. Версия run_app_app - предназначена для использования при которой весь проект размещен в подпапке app.

Отличия версий
run_app_project - файл утилиты run_app помещается в корневую папку проекта. И запускается оттуда с помощью клика мышки из проводника или создавая ярлык для этого файла на рабочем столе.

run_app_app - Эта версия удобна,если проект большой и содержится много файлов в корневой папке проекта. Для удобства, чтобы запускаемый файл не искать и не путать с файлами проекта. В корневой папке будет просто один исполняемый файл и все. А все файлы проекта располагаются в подпапке "app". В остальном обе версии работают полностью одинаково и компилируются из одного исходного кода, с переключателем опции для компиляции.

Версия с приложением в подпапке APP
1. Подготовка:
Создайте папку для Вашего будущего автономного приложения

скопируйте туда утилиту run_app.exe

Создайте подпапку app

Разместите весь ваш проект в каталоге app. Важно, чтобы стартовый файл вашего проекта, который должен запускаться первым, назывался main.py. Это условие необходимо для корректной работы программы. Все остальные файлы и директории вашего проекта также должны быть в папке app.

Перед размещением проекта, в папке app необходимо создать файл requirements.txt, который будет содержать список всех используемых библиотек и их версий. Для этого в среде разработки или в командной строке выполните следующую команду:

bash

pip freeze > requirements.txt

Эта команда создаст файл requirements.txt с актуальным списком зависимостей, что позволит программе автоматически установить все необходимые библиотеки в виртуальное окружение при запуске.

Запуск:

Переименуйте run_app.exe в любое удобное для вас имя, например, в название вашего приложения. Это поможет вам и другим пользователям легко идентифицировать приложение.
Выполнение:

Запустите получившийся исполняемый файл. Программа автоматически проверит наличие Python на вашем компьютере, создаст виртуальное окружение, если его нет или оно некорректно, установит, при необходимости, все необходимые зависимости из requirements.txt и запустит ваш скрипт main.py.
Важно
Программа поддерживает запуск любого проекта, который может работать в виртуальном окружении. Однако запуск фреймворков, таких как Django, Flask, FastAPI и других, которые требуют дополнительных настроек и запускаются не с помощью скрипта main.py, будет реализован в следующих версиях этой утилиты.

Настройка Утилиты
В этом разделе описывается, как настроить утилиту run-app и создать исполняемый файл (.exe) с помощью PyInstaller.

Следуйте этим шагам, чтобы подготовить и запустить ваш Python-проект в виде самостоятельного приложения.

Шаг 1: Установка PyInstaller
Клонируйте репозиторий run_app к себе на компьютер

далее:

Установите PyInstaller, если он еще не установлен. Это можно сделать с помощью команды:

pip install pyinstaller

Шаг 2: Создание исполняемого файла (exe)
Используйте PyInstaller, чтобы создать исполняемый файл для вашего приложения. В командной строке перейдите в каталог, где находится ваш файл run_app.py, и выполните следующую команду:

pyinstaller --onefile run_app.py

Эта команда создаст исполняемый файл в папке dist, который можно переименовать и использовать для запуска вашего приложения.

Этот файл нужно создать только ОДИН раз. Файл этой утилиты подойдет к ЛЮБОМУ вашему проекту.

Нет необходимости создавать EXE-файл утилиты для каждого нового Вашего приложения заново или отдельно.

Шаг 3: Настройка исполняемого файла
После создания исполняемого файла, переместите его в корневую папку вашего будущего автономного приложения. Вы можете переименовать файл его в удобное для вас имя, например, в название вашего приложения. создайте папку app и перекопироуйте туда ваш проект-приложение на pithon. Основной файл запуска проекта должен называться main.py.

Не забудьте создать и переписать в папку app файл requirements.txt

Теперь вы можете запускать ваш проект с помощью утилиты run_app.

Шаг 4: Тестирование
Запустите созданный исполняемый файл и убедитесь, что приложение работает корректно. Программа автоматически создаст виртуальное окружение, установит все зависимости и запустит скрипт main.py.

Теперь ваше Python-приложение готово к использованию в виде самостоятельного приложения, которое можно запускать на любой машине без необходимости дополнительной настройки.